import pandas as pd 
dtypes = {
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'CountryIdentifier':                                    'float64',
        'CityIdentifier':                                       'float64',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float16',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_FlightRing':                                    'category',
        'Census_IsSecureBootEnabled':                           'int8',
        'Wdft_IsGamer':                                         'float16',
        'HasDetections':                                        'int8'
        }
train_df = pd.read_csv('D:/UNT/Sem 5/data/train.csv/train_interm_s2.csv',dtype= dtypes, low_memory=False)
train_df.columns

city_identifier_df = pd.DataFrame(train_df.groupby('CityIdentifier').size())
city_identifier_df.reset_index(inplace=True)
city_identifier_df.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
city_identifier_df.sort_values(by=['counts'],ascending=False,inplace=True)




#AVProductStatesIdentifier 

AVProductStatesIdentifier = pd.DataFrame(train_df.groupby('AVProductStatesIdentifier').size())
AVProductStatesIdentifier.reset_index(inplace=True)
AVProductStatesIdentifier.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
AVProductStatesIdentifier.sort_values(by=['counts'],ascending=False,inplace=True)

#Platform
Platform = pd.DataFrame(train_df.groupby('Platform').size())
Platform.reset_index(inplace=True)
Platform.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
Platform.sort_values(by=['counts'],ascending=False,inplace=True)


#Processor
Processor = pd.DataFrame(train_df.groupby('Processor').size())
Processor.reset_index(inplace=True)
Processor.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
Processor.sort_values(by=['counts'],ascending=False,inplace=True)


#Census_OSArchitecture
Census_OSArchitecture = pd.DataFrame(train_df.groupby('Census_OSArchitecture').size())
Census_OSArchitecture.reset_index(inplace=True)
Census_OSArchitecture.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
Census_OSArchitecture.sort_values(by=['counts'],ascending=False,inplace=True)



train_df.groupby(['Processor','Census_OSArchitecture']).size()

# observing the cross tab or groupby analysis we can remove the processor or Census_OSArchitecture 

train_df.drop(columns=['Census_OSArchitecture'],inplace=True)

train_df = train_df[train_df.Processor != 'arm64']

# removing arm64 as there are significnaltly less amount of objects 

#Census_GenuineStateName
Census_GenuineStateName = pd.DataFrame(train_df.groupby('Census_GenuineStateName').size())
Census_GenuineStateName.reset_index(inplace=True)
Census_GenuineStateName.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
Census_GenuineStateName.sort_values(by=['counts'],ascending=False,inplace=True)

#Census_OSWUAutoUpdateOptionsName
Census_OSWUAutoUpdateOptionsName = pd.DataFrame(train_df.groupby('Census_OSWUAutoUpdateOptionsName').size())
Census_OSWUAutoUpdateOptionsName.reset_index(inplace=True)
Census_OSWUAutoUpdateOptionsName.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
Census_OSWUAutoUpdateOptionsName.sort_values(by=['counts'],ascending=False,inplace=True)

#OsSuite
OsSuite = pd.DataFrame(train_df.groupby('OsSuite').size())
OsSuite.reset_index(inplace=True)
OsSuite.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
OsSuite.sort_values(by=['counts'],ascending=False,inplace=True)

#Census_ActivationChannel

Census_ActivationChannel = pd.DataFrame(train_df.groupby('Census_ActivationChannel').size())
Census_ActivationChannel.reset_index(inplace=True)
Census_ActivationChannel.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
Census_ActivationChannel.sort_values(by=['counts'],ascending=False,inplace=True)


#Census_ProcessorManufacturerIdentifier

Census_ProcessorManufacturerIdentifier = pd.DataFrame(train_df.groupby('Census_ProcessorManufacturerIdentifier').size())
Census_ProcessorManufacturerIdentifier.reset_index(inplace=True)
Census_ProcessorManufacturerIdentifier.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
Census_ProcessorManufacturerIdentifier.sort_values(by=['counts'],ascending=False,inplace=True)


#AVProductsEnabled

AVProductsEnabled = pd.DataFrame(train_df.groupby('AVProductsEnabled').size())
AVProductsEnabled.reset_index(inplace=True)
AVProductsEnabled.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
AVProductsEnabled.sort_values(by=['counts'],ascending=False,inplace=True)

#AVProductsInstalled

AVProductsInstalled = pd.DataFrame(train_df.groupby('AVProductsInstalled').size())
AVProductsInstalled.reset_index(inplace=True)
AVProductsInstalled.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
AVProductsInstalled.sort_values(by=['counts'],ascending=False,inplace=True)

#SkuEdition

SkuEdition = pd.DataFrame(train_df.groupby('SkuEdition').size())
SkuEdition.reset_index(inplace=True)
SkuEdition.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
SkuEdition.sort_values(by=['counts'],ascending=False,inplace=True)

#Census_FlightRing

Census_FlightRing = pd.DataFrame(train_df.groupby('Census_FlightRing').size())
Census_FlightRing.reset_index(inplace=True)
Census_FlightRing.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
Census_FlightRing.sort_values(by=['counts'],ascending=False,inplace=True)

#Census_OSInstallTypeName

Census_OSInstallTypeName = pd.DataFrame(train_df.groupby('Census_OSInstallTypeName').size())
Census_OSInstallTypeName.reset_index(inplace=True)
Census_OSInstallTypeName.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
Census_OSInstallTypeName.sort_values(by=['counts'],ascending=False,inplace=True)

#Census_OSBranch


Census_OSBranch = pd.DataFrame(train_df.groupby('Census_OSBranch').size())
Census_OSBranch.reset_index(inplace=True)
Census_OSBranch.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
Census_OSBranch.sort_values(by=['counts'],ascending=False,inplace=True)

#SmartScreen
SmartScreen = pd.DataFrame(train_df.groupby('SmartScreen').size())
SmartScreen.reset_index(inplace=True)
SmartScreen.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
SmartScreen.sort_values(by=['counts'],ascending=False,inplace=True)

# RequireAdmin
# ExistsNotSet
# Off
# Warn
# Prompt
# Block
# off
# &#x02;
# &#x01;
# on
# On
# requireadmin
# Promt
# 0
# OFF
# Enabled
# 00000000
# &#x03;

train_df['SmartScreen'] = train_df['SmartScreen'].replace({'Off':'off','OFF':'off','&#x02;':'2','&#x01;':'1','On':'on',
        'RequireAdmin':'requireadmin', '00000000':'0','&#x03;':'3','Promt':'Prompt','requireadmin':'requireAdmin','Warn':'warn' })


#Census_OSSkuName

Census_OSSkuName = pd.DataFrame(train_df.groupby('Census_OSSkuName').size())
Census_OSSkuName.reset_index(inplace=True)
Census_OSSkuName.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
Census_OSSkuName.sort_values(by=['counts'],ascending=False,inplace=True)


#Census_OSEdition


Census_OSEdition = pd.DataFrame(train_df.groupby('Census_OSEdition').size())
Census_OSEdition.reset_index(inplace=True)
Census_OSEdition.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
Census_OSEdition.sort_values(by=['counts'],ascending=False,inplace=True)

#Census_ProcessorCoreCount

Census_ProcessorCoreCount = pd.DataFrame(train_df.groupby('Census_ProcessorCoreCount').size())
Census_ProcessorCoreCount.reset_index(inplace=True)
Census_ProcessorCoreCount.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
Census_ProcessorCoreCount.sort_values(by=['counts'],ascending=False,inplace=True)

#OsVer

OsVer = pd.DataFrame(train_df.groupby('OsVer').size())
OsVer.reset_index(inplace=True)
OsVer.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
OsVer.sort_values(by=['counts'],ascending=False,inplace=True)

#OrganizationIdentifier

OrganizationIdentifier = pd.DataFrame(train_df.groupby('OrganizationIdentifier').size())
OrganizationIdentifier.reset_index(inplace=True)
OrganizationIdentifier.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
OrganizationIdentifier.sort_values(by=['counts'],ascending=False,inplace=True)

#OsBuild

OsBuild = pd.DataFrame(train_df.groupby('OsBuild').size())
OsBuild.reset_index(inplace=True)
OsBuild.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
OsBuild.sort_values(by=['counts'],ascending=False,inplace=True)

#EngineVersion

EngineVersion = pd.DataFrame(train_df.groupby('EngineVersion').size())
EngineVersion.reset_index(inplace=True)
EngineVersion.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
EngineVersion.sort_values(by=['counts'],ascending=False,inplace=True)




train_df.CityIdentifier.dtype
train_df.AVProductStatesIdentifier.dtype
train_df.AvSigVersion.dtype
train_df.Census_ProcessorModelIdentifier.dtype
train_df.Census_OSVersion.dtype
train_df.GeoNameIdentifier.dtype
train_df.Census_OSBuildRevision.dtype
train_df.CountryIdentifier.dtype
train_df.Census_OSBuildNumber.dtype
train_df.AppVersion.dtype

train_df.reset_index(inplace=True)
train_df.drop(['index'],axis=1,inplace=True)


#AvSigVersion
list_val = []
for i in range(len(train_df)):
    list_val.append(train_df.AvSigVersion[i].rsplit('.',2)[0])

train_df['AvSigVersion'] = list_val


AvSigVersion = pd.DataFrame(train_df.groupby('AvSigVersion').size())
AvSigVersion.reset_index(inplace=True)
AvSigVersion.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
AvSigVersion.sort_values(by=['counts'],ascending=False,inplace=True)



#AppVersion

AppVersion = pd.DataFrame(train_df.groupby('AppVersion').size())
AppVersion.reset_index(inplace=True)
AppVersion.rename({0:'counts'}, errors="raise",axis=1,inplace=True)
AppVersion.sort_values(by=['counts'],ascending=False,inplace=True)


train_df.to_csv('D:/UNT/Sem 5/data/train.csv/train_interm_s3.csv',index=False)












































