import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from dython import nominal

dtypes = {
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'CountryIdentifier':                                    'float16',
        'CityIdentifier':                                       'float16',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float16',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_FlightRing':                                    'category',
        'Census_IsSecureBootEnabled':                           'int8',
        'Wdft_IsGamer':                                         'float16',
        'HasDetections':                                        'int8'
        }


train_df = pd.read_csv('D:/UNT/Sem 5/data/train.csv/train_interm_s1.csv',dtype= dtypes, low_memory=False)
train_df.columns




#['ProductName', 'EngineVersion', 'AppVersion', 'AvSigVersion',
#       'AVProductStatesIdentifier', 'AVProductsInstalled', 'AVProductsEnabled',
#       'CountryIdentifier', 'CityIdentifier', 'OrganizationIdentifier',
#       'GeoNameIdentifier', 'Platform', 'Processor', 'OsVer', 'OsBuild',
#       'OsSuite', 'SkuEdition', 'IsProtected', 'SmartScreen', 'Firewall',
#       'Census_ProcessorCoreCount', 'Census_ProcessorManufacturerIdentifier',
#       'Census_ProcessorModelIdentifier', 'Census_OSVersion',
#       'Census_OSArchitecture', 'Census_OSBranch', 'Census_OSBuildNumber',
#       'Census_OSBuildRevision', 'Census_OSEdition', 'Census_OSSkuName',
#       'Census_OSInstallTypeName', 'Census_OSWUAutoUpdateOptionsName',
#       'Census_GenuineStateName', 'Census_ActivationChannel',
#       'Census_FlightRing', 'Census_IsSecureBootEnabled', 'Wdft_IsGamer',
#       'HasDetections'],

## censeu corellation

col_1 = ['ProductName', 'EngineVersion', 'AppVersion', 'AvSigVersion','AVProductStatesIdentifier', 'AVProductsInstalled', 
         'AVProductsEnabled','CountryIdentifier', 'CityIdentifier', 'OrganizationIdentifier']
         
col_2 = ['GeoNameIdentifier', 'Platform', 'Processor', 'OsVer', 'OsBuild','OsSuite', 'SkuEdition', 
         'IsProtected', 'SmartScreen', 'Firewall']

census_col = ['Census_ProcessorCoreCount', 'Census_ProcessorManufacturerIdentifier',
       'Census_ProcessorModelIdentifier', 'Census_OSVersion',
       'Census_OSArchitecture', 'Census_OSBranch', 'Census_OSBuildNumber',
       'Census_OSBuildRevision', 'Census_OSEdition', 'Census_OSSkuName',
       'Census_OSInstallTypeName', 'Census_OSWUAutoUpdateOptionsName',
       'Census_GenuineStateName', 'Census_ActivationChannel',
       'Census_FlightRing', 'Census_IsSecureBootEnabled']

sns.heatmap( train_df[col_1].corr(method='spearman'), annot = True,vmin=-1,vmax=1,center=0,cmap='coolwarm')
sns.heatmap( train_df[col_2].corr(method='spearman'), annot = True,vmin=-1,vmax=1,center=0,cmap='coolwarm')
sns.heatmap( train_df[census_col].corr(), annot = True, vmin=-1, vmax=1, center= 0,cmap= 'coolwarm')
plt.matshow( train_df[col_1].corr() )




for i in train_df.columns:
    print(any(train_df[i].isnull()))
        
## 
    
#train_df.dropna(axis=0,inplace=True)

column_name = [] 
counts = []
for i in train_df.columns:
    column_name.append(i)    
    counts.append(train_df[i].nunique())
unique_val_fea = pd.DataFrame({'column_namae':column_name,'counts':counts})     
unique_val_fea=unique_val_fea.sort_values(by=['counts'],ascending=False)
unique_val_fea.to_csv('D:/UNT/Sem 5/data/train.csv/unique_values_features.csv',index=False)


train_df.to_csv('D:/UNT/Sem 5/data/train.csv/train_interm_s2.csv',index=False)


from sqlalchemy import create_engine
engine = create_engine('mysql://root:admin@localhost/microsoft_data')
    
train_df.to_sql(con=engine, name='train', if_exists='replace')
test_df.to_sql(con=engine, name='test', if_exists='replace', flavor='mysql')


nominal.associations(train_df[col_1])